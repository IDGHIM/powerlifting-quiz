import express from 'express';
import { Question } from '../models/questionModel';

const router = express.Router();

// üß© GET /api/quiz - R√©cup√®re les questions par cat√©gorie
router.get('/quiz', async (req: express.Request, res: express.Response) => {
  console.log('üß© Route GET /api/quiz appel√©e');
  
  try {
    const rawCategory = req.query.category;
    
    if (!rawCategory || typeof rawCategory !== 'string') {
      console.log('‚ùå Param√®tre category manquant ou invalide');
      return res.status(400).json({ error: 'Param√®tre category requis' });
    }
    
    const category = rawCategory.trim().toLowerCase();
    console.log(`üîç Recherche questions pour la cat√©gorie: "${category}"`);
    
    const questions = await Question.find({ 
      category: { $regex: `^${category}$`, $options: 'i' } 
    });
    
    if (!questions.length) {
      console.log(`‚ùå Aucune question trouv√©e pour la cat√©gorie: "${category}"`);
      return res.status(404).json({ error: `Cat√©gorie '${category}' non trouv√©e` });
    }
    
    console.log(`‚úÖ ${questions.length} questions trouv√©es pour "${category}"`);
    res.json(questions);
    
  } catch (err) {
    console.error('‚ùå Erreur /quiz :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üé≤ GET /api/quiz/random - Questions al√©atoires (optionnel)
router.get('/quiz/random', async (req: express.Request, res: express.Response) => {
  console.log('üé≤ Route GET /api/quiz/random appel√©e');
  
  try {
    const limit = parseInt(req.query.limit as string) || 10;
    const category = req.query.category as string;
    
    console.log(`üîç Recherche ${limit} questions al√©atoires${category ? ` pour "${category}"` : ''}`);
    
    let query = {};
    if (category) {
      query = { category: { $regex: `^${category}$`, $options: 'i' } };
    }
    
    const questions = await Question.aggregate([
      { $match: query },
      { $sample: { size: limit } }
    ]);
    
    console.log(`‚úÖ ${questions.length} questions al√©atoires retourn√©es`);
    res.json(questions);
    
  } catch (err) {
    console.error('‚ùå Erreur /quiz/random :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üìä GET /api/quiz/categories - Liste toutes les cat√©gories disponibles
router.get('/quiz/categories', async (req: express.Request, res: express.Response) => {
  console.log('üìä Route GET /api/quiz/categories appel√©e');
  
  try {
    const categories = await Question.distinct('category');
    console.log(`‚úÖ ${categories.length} cat√©gories trouv√©es:`, categories);
    res.json(categories);
    
  } catch (err) {
    console.error('‚ùå Erreur /quiz/categories :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üî¢ GET /api/quiz/count - Compte les questions par cat√©gorie
router.get('/quiz/count', async (req: express.Request, res: express.Response) => {
  console.log('üî¢ Route GET /api/quiz/count appel√©e');
  
  try {
    const counts = await Question.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 }
        }
      },
      {
        $project: {
          category: '$_id',
          count: 1,
          _id: 0
        }
      }
    ]);
    
    console.log('‚úÖ Comptage des questions par cat√©gorie:', counts);
    res.json(counts);
    
  } catch (err) {
    console.error('‚ùå Erreur /quiz/count :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üÜî GET /api/quiz/:id - R√©cup√®re une question sp√©cifique
router.get('/quiz/:id', async (req: express.Request, res: express.Response) => {
  console.log(`üÜî Route GET /api/quiz/${req.params.id} appel√©e`);
  
  try {
    const question = await Question.findById(req.params.id);
    
    if (!question) {
      console.log(`‚ùå Question non trouv√©e: ${req.params.id}`);
      return res.status(404).json({ error: 'Question non trouv√©e' });
    }
    
    console.log(`‚úÖ Question trouv√©e: ${question.question}`);
    res.json(question);
    
  } catch (err) {
    console.error('‚ùå Erreur /quiz/:id :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// üìã Fonction pour lister les routes disponibles
function listQuizRoutes() {
  console.log('\nüìç ROUTES QUIZ DISPONIBLES:');
  console.log('   GET /api/quiz?category=CATEGORY - Questions par cat√©gorie');
  console.log('   GET /api/quiz/random?limit=N&category=CATEGORY - Questions al√©atoires');
  console.log('   GET /api/quiz/categories - Liste des cat√©gories');
  console.log('   GET /api/quiz/count - Comptage par cat√©gorie');
  console.log('   GET /api/quiz/:id - Question sp√©cifique');
}

// Appeler au chargement du module
listQuizRoutes();

export default router;